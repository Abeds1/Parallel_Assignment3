#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

// Function to allocate memory for a matrix
float** allocateMatrix(int rows, int cols) {
    float** matrix = (float**)malloc(rows * sizeof(float*));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (float*)malloc(cols * sizeof(float));
    }
    return matrix;
}

// Function to initialize a matrix with random values
void initializeMatrix(float** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = (float)rand() / RAND_MAX; // Random value between 0 and 1
        }
    }
}

// Function to free memory allocated for a matrix
void freeMatrix(float** matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Function to perform matrix multiplication
void matrixMultiply(float** A, float** B, float** C, int rowsA, int colsA, int colsB) {
    #pragma acc parallel loop collapse(2)
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            C[i][j] = 0.0;
            for (int k = 0; k < colsA; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    const int size = 1024;
    float** A = allocateMatrix(size, size);
    float** B = allocateMatrix(size, size);
    float** C = allocateMatrix(size, size);

    initializeMatrix(A, size, size);
    initializeMatrix(B, size, size);

    double start_time = omp_get_wtime();

    matrixMultiply(A, B, C, size, size, size);

    double end_time = omp_get_wtime();
    double elapsed_time = end_time - start_time;

    printf("Time taken for matrix multiplication: %.6f seconds\n", elapsed_time);

    freeMatrix(A, size);
    freeMatrix(B, size);
    freeMatrix(C, size);

    return 0;
}
